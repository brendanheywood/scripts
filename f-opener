#!/usr/bin/perl

use strict;
use Data::Dumper;
use POSIX;
use Term::ANSIColor;
use Time::HiRes qw (sleep);
use Term::ReadKey;

my @lines = <STDIN>;

unshift @lines, '--';

my $state;
$state->{'grep'} = $ARGV[0];
$state->{'x'} = 0;
$state->{'y'} = 0;
$state->{'lines'} = @lines;
$state->{'draw'} = 0;

# print Dumper($state);
# exit;
sub draw {
    my ($st) = @_;
    my @size = Term::ReadKey::GetTerminalSize STDOUT;

    $st->{maxx} = $size[0];
    $st->{maxy} = $size[1];

    # Reset the window, don't do it the first time
    if ($st->{draw}++ > 0){
        print "\e[H"; # reset
        # print "\e[J"; # clear
    }

    # Draw a sticky file header

    # Draw the lines we want
    my $height = $st->{maxy} - 1;
    $st->{h} = $height;
    my $y1 = $st->{y};
    my $y2 = $y1 + $height - 0;
    my $width = $st->{maxx} - 1;
    $st->{w} = $width;
    my $x1 = $st->{x};
    my $x2 = $x1 + $width - 5;

    for (my $y = $y1; $y < $y2; $y++){
        my $line = $lines[$y];
        chomp $line;
        my $sub = sprintf ' %-' .$width."s\n", substr($line, $x1, $width);
        print $sub;
    }

    # If the number of rows is more than the screen height then
    # Draw a position and status bar

# print Dumper($st);

# search terms
# print $state->{grep};
    print "\e[7m"; # invert
    print " lines ".($y1+1)."-$y2 / ". ($#lines+1). ' ';
    printf "%d% ", 100 * ($y2 / ($#lines+1)); # per %
    print "\e[27m"; # reset invert
    print "\e[?25l    "; # no blinking cursor
    # print "crap\n";
}

draw($state);

open my $TTY, '<', '/dev/tty';
ReadMode('cbreak', $TTY);

$SIG{INT} = sub {
    ReadMode('normal', $TTY);
    print "\n";
    print "\e[?25h    "; # reset blinking cursor
    exit;
};

my $buffer = '';

while (1) {
    my $char = ReadKey(-1, $TTY);
    if (!defined $char){

        if ($buffer){

            my $per;
            my $lh = $#lines - $state->{h} + 1;

            if (    $buffer == '27'        # esc
                 || $buffer == '113')    { # q
                last;
            } elsif($buffer == '279165') { # up
                $state->{'y'}--;
            } elsif($buffer == '279166') { # down
                $state->{'y'}++;
            } elsif($buffer == '279168') { # left
                $state->{'x'}-= 4;
            } elsif($buffer == '279167') { # right
                $state->{'x'}+= 4;
            } elsif($buffer == '279153126') { # page up
                $state->{'y'}-= $state->{h};
            } elsif($buffer == '279154126'    # page down
                 || $buffer == '32') {        # space
                $state->{'y'}+= $state->{h};
            } elsif ($buffer >= '48' and $buffer <= '57'){        # 1 = 10%, 9 = 90%
                $per = $buffer*1 - 48;
                if ($per == 0){ $per = 10; }
                $per--;
                $state->{'y'} = floor($per * $lh / 9);
            }
            if ($state->{x} < 0 ){ $state->{x} = 0; }
            if ($state->{y} < 0 ){ $state->{y} = 0; }
            if ($state->{y} > $lh){ $state->{y} = $lh; }


            draw($state);
            print "buffer: '$buffer' $per";
        }

        $buffer = '';
        sleep (0.005);
        next;
    }

    $buffer .= ord($char);
}

print "\n";

ReadMode('normal', $TTY);
print "\e[?25h"; # reset blinking cursor
close $TTY;

# TODO
# Spec for file choose
# show each chunk of diff
# up / down keys to scroll up and down through each chunk
# page up / down to scrol up and down half a screen height
# show a cursor highlighting a whole chunk line match
# enter opens vi at that line
# show number of chunks (not just lines)
# reformat chunks to show filename once per chunk on new line to save room
# add won color scheme back on
# If less lines than terminal height don't enter interactive mode

