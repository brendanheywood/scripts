#!/usr/bin/perl

use utf8;
use strict;
use Data::Dumper;
use POSIX;
use Term::ANSIColor;
use Time::HiRes qw (sleep);
use Term::ReadKey;


binmode STDOUT, ":utf8";

# Colors see http://misc.flogisoft.com/bash/tip_colors_and_formatting

my @lines = <STDIN>;


my @header = split('\|', shift @lines);

shift @lines; # this is the ---+--+-- line

pop @lines; # 1 blank line at end
pop @lines; # 2 blank line at end

# print Dumper(@header);
# exit;

# print @lines;
# print "EOFEOF";
# exit;


my $state;
$state->{'x'} = 0;
$state->{'y'} = 0;
$state->{'head'} = \@header;
$state->{'lines'} = @lines;
$state->{'draw'} = 0;

# print Dumper($state);
# exit;
sub draw {
    my ($st) = @_;
    my @size = Term::ReadKey::GetTerminalSize STDOUT;

    my $f = '┌─┬┐'.
            '│ ││'.
            '├─┼┤'.
            '└─┴┘';

    my $colc = "\e[34m"; # blue fg    - column color
    my $colh = "\e[39m"; # default fg - header color
    my $cold = "\e[32m"; # green fg   - data color
    my $coln = "\e[90m"; # yellow fg  - row num color



    $st->{maxx} = $size[0];
    $st->{maxy} = $size[1];

    # Reset the window, don't do it the first time
    if ($st->{draw}++ > 0){
        print "\e[H"; # reset
        print "\e[J"; # clear
    }

    my @head = @{ $st->{head} };

    # Draw a sticky file header

    # How many rows do we have?
    my $nw = length(($#lines+1) . '');
    #
    my $l1 = substr($f,1,1) x $nw;
    my $l2 = $coln
           . ' ' x ($nw-1) . '#'
           . $colc;
    my $l3 = substr($f,1,1) x $nw;


    my $col = 0;
    my $w;
    $l1 .= $colc;
    foreach my $head (@head){
        chomp $head;
        $w = length($head);

        $l1 .= substr($f,2,1);
        $l1 .= substr($f,1,1) x $w;

        $l2 .= substr($f,6,1);
        $l2 .= $colh;
        $l2 .= sprintf("%-".$w."s", $head);
        $l2 .= $colc;

        $l3 .= substr($f,10,1);
        $l3 .= substr($f,9,1) x $w;

        $col++;
    }

    $l1 .= substr($f,3,1);
    $l2 .= substr($f,7,1);
    $l3 .= substr($f,11,1);

    print "\e[34m"; # blue fg
    print "$l1\n$l2\n$l3\n";

    # Draw the lines we want
    my $height = $st->{maxy} - 1;
    $st->{h} = $height;
    my $y1 = $st->{y};
    my $y2 = $y1 + $height - 3;
    my $width = $st->{maxx} - 1;
    $st->{w} = $width;
    my $x1 = $st->{x};
    my $x2 = $x1 + $width - 5;

    my $file = '';
    my $lnum = -1;
    my $text = '';
    my $mode = '';
    for (my $y = $y1; $y < $y2; $y++){
        my $line = $lines[$y];
        chomp $line;

        print $coln;
        printf "%".$nw."s", $y+1;
        print $colc;


        my @parts = split('\|', $line);
        $line = join(substr($f,4,1), @parts);

        print substr($f,4,1);
        print $cold;
        printf "%s", substr( $line, $x1, $width);
        print $colc;

        print substr($f,4,1);
        print "\n";
    }

    # If the number of rows is more than the screen height then
    # Draw a position and status bar

# print Dumper($st);

    print "\e[39m"; # default fg
    print "\e[7m"; # invert
    print " Rows ".($y1+1)."-$y2 / ". ($#lines+1). ' ';
    printf "%d% ", 100 * ($y2 / ($#lines+1)); # per %


    print "\e[27m"; # reset invert
    print "\e[?25l    "; # no blinking cursor
}

draw($state);

open my $TTY, '<', '/dev/tty';
ReadMode('cbreak', $TTY);

$SIG{INT} = sub {
    ReadMode('normal', $TTY);
    print "\n";
    print "\e[?25h    "; # reset blinking cursor
    exit;
};

my $buffer = '';

while (1) {
    my $char = ReadKey(-1, $TTY);
    if (!defined $char){

        if ($buffer){

            my $per;
            my $lh = $#lines - $state->{h} + 4; # lines of chrome

            if (    $buffer == '27'        # esc
                 || $buffer == '113')    { # q
                last;
            } elsif($buffer == '10') { # up
                $state->{selected} = 1;
                last;
            } elsif($buffer == '279165') { # up
                $state->{'y'}--;
                # $state->{'cursor'}--;
            } elsif($buffer == '279166') { # down
                $state->{'y'}++;
                # $state->{'cursor'}++;
            } elsif($buffer == '279168') { # left
                $state->{'x'}-= 4;
            } elsif($buffer == '279167') { # right
                $state->{'x'}+= 4;
            } elsif($buffer == '279153126') { # page up
                $state->{'y'}-= $state->{h};
            } elsif($buffer == '279154126'    # page down
                 || $buffer == '32') {        # space
                $state->{'y'}+= $state->{h};
            } elsif ($buffer >= '48' and $buffer <= '57'){        # 1 = 10%, 9 = 90%
                $per = $buffer*1 - 48;
                if ($per == 0){ $per = 10; }
                $per--;
                $state->{'y'} = floor($per * $lh / 9);
            }

            # Don't go out of bounds
            if ($state->{x} < 0 ){ $state->{x} = 0; }
            if ($state->{y} < 0 ){ $state->{y} = 0; }
            if ($state->{y} > $lh){ $state->{y} = $lh; }


            draw($state);
            print "buffer: '$buffer' $per";
        }

        $buffer = '';
        sleep (0.005);
        next;
    }

    $buffer .= ord($char);
}

print "\n";

ReadMode('normal', $TTY);
print "\e[?25h"; # reset blinking cursor
print "\e[21m"; # not bold
print "\e[39m"; # default fg
print "\e[49m"; # default bg
close $TTY;

# TODO
# If less lines than terminal height don't enter interactive mode
# If more lines than say 1000 then stop reading sdtin, flag that there is more, only keep reading if we scroll down that far
# show clean error when no results
# sticky left column
# make headers match cols when pan right
# show pipes for extra hidden columns to the right


